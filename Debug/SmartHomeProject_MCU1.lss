
SmartHomeProject_MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000144  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000092d  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077e  00000000  00000000  00000b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000506  00000000  00000000  00001313  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d1  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00001d36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 44 00 	call	0x88	; 0x88 <main>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <HC05_Init>:
 *  Author: LENOVO.SXO11
 */ 
#include "HC05.h"
void HC05_Init(void)
{
	UART_Init();
  7c:	0e 94 5a 00 	call	0xb4	; 0xb4 <UART_Init>
  80:	08 95       	ret

00000082 <HC05_Receive>:
}
uint8_t HC05_Receive(void)
{
	uint8_t data;
	data = UART_Receive();
  82:	0e 94 62 00 	call	0xc4	; 0xc4 <UART_Receive>
	return data;
}
  86:	08 95       	ret

00000088 <main>:
#include "SPI.h"
//Main function
uint8_t RECEIVED_DATA;
int main(void)
{
SPI_Init();
  88:	0e 94 4f 00 	call	0x9e	; 0x9e <SPI_Init>
HC05_Init();
  8c:	0e 94 3e 00 	call	0x7c	; 0x7c <HC05_Init>

	while (1) 
    {
	RECEIVED_DATA = HC05_Receive();
  90:	0e 94 41 00 	call	0x82	; 0x82 <HC05_Receive>
  94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
    SPI_Transmit(RECEIVED_DATA);
  98:	0e 94 56 00 	call	0xac	; 0xac <SPI_Transmit>
	}
  9c:	f9 cf       	rjmp	.-14     	; 0x90 <main+0x8>

0000009e <SPI_Init>:
#include "SPI.h"

void SPI_Init(void)
{
	#if SPI_MODE == MASTER
	SET_BIT(SPI_PORT, MOSI);/*Define direction as output*/
  9e:	bd 9a       	sbi	0x17, 5	; 23
	CLR_BIT(SPI_PORT, MISO);/*Define direction as input*/
  a0:	be 98       	cbi	0x17, 6	; 23
	SET_BIT(SPI_PORT, CLK);/*Define direction as output*/
  a2:	bf 9a       	sbi	0x17, 7	; 23
	SET_BIT(SPI_PORT, SS); /*Define direction as output*/
  a4:	bc 9a       	sbi	0x17, 4	; 23
	SPCR = 0x53;//0b 0101 0011
  a6:	83 e5       	ldi	r24, 0x53	; 83
  a8:	8d b9       	out	0x0d, r24	; 13
  aa:	08 95       	ret

000000ac <SPI_Transmit>:
	SPCR = 0x43;//0b 0100 0011
	#endif
}
void SPI_Transmit(uint8_t data)
{
	SPDR = data;
  ac:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR, SPIF) != 1);
  ae:	77 9b       	sbis	0x0e, 7	; 14
  b0:	fe cf       	rjmp	.-4      	; 0xae <SPI_Transmit+0x2>
}
  b2:	08 95       	ret

000000b4 <UART_Init>:
}
void UART_Transmit(uint8_t data)
{
	UDR = data;
	while (GET_BIT(UCSRA, TXC) != 1);
}
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	86 e8       	ldi	r24, 0x86	; 134
  ba:	80 bd       	out	0x20, r24	; 32
  bc:	87 e6       	ldi	r24, 0x67	; 103
  be:	89 b9       	out	0x09, r24	; 9
  c0:	10 bc       	out	0x20, r1	; 32
  c2:	08 95       	ret

000000c4 <UART_Receive>:
uint8_t UART_Receive(void)
{
	while (GET_BIT(UCSRA, RXC) != 1);
  c4:	5f 9b       	sbis	0x0b, 7	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <UART_Receive>
	return UDR;
  c8:	8c b1       	in	r24, 0x0c	; 12
}
  ca:	08 95       	ret

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
