
SmartHomeProject_MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c25  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000722  00000000  00000000  0000106d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071e  00000000  00000000  0000178f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00001eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000454  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000378  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000282c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 04 01 	call	0x208	; 0x208 <main>
  74:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPin_Direction>:
			break;
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
			break;
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
  7c:	44 23       	and	r20, r20
  7e:	19 f0       	breq	.+6      	; 0x86 <DIO_SetPin_Direction+0xa>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	c9 f1       	breq	.+114    	; 0xf6 <DIO_SetPin_Direction+0x7a>
  84:	08 95       	ret
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	91 f0       	breq	.+36     	; 0xae <DIO_SetPin_Direction+0x32>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPin_Direction+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	d9 f0       	breq	.+54     	; 0xc6 <DIO_SetPin_Direction+0x4a>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	29 f1       	breq	.+74     	; 0xde <DIO_SetPin_Direction+0x62>
  94:	08 95       	ret
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPin_Direction+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPin_Direction+0x22>
  a6:	80 95       	com	r24
  a8:	82 23       	and	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	08 95       	ret
  ae:	27 b3       	in	r18, 0x17	; 23
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_SetPin_Direction+0x3e>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_SetPin_Direction+0x3a>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	87 bb       	out	0x17, r24	; 23
  c4:	08 95       	ret
  c6:	24 b3       	in	r18, 0x14	; 20
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_SetPin_Direction+0x56>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_SetPin_Direction+0x52>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
  dc:	08 95       	ret
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_SetPin_Direction+0x6e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_SetPin_Direction+0x6a>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	81 bb       	out	0x11, r24	; 17
  f4:	08 95       	ret
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	89 f0       	breq	.+34     	; 0x11c <DIO_SetPin_Direction+0xa0>
  fa:	28 f0       	brcs	.+10     	; 0x106 <DIO_SetPin_Direction+0x8a>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	c9 f0       	breq	.+50     	; 0x132 <DIO_SetPin_Direction+0xb6>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	11 f1       	breq	.+68     	; 0x148 <DIO_SetPin_Direction+0xcc>
 104:	08 95       	ret
 106:	2a b3       	in	r18, 0x1a	; 26
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPin_Direction+0x96>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPin_Direction+0x92>
 116:	82 2b       	or	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPin_Direction+0xac>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPin_Direction+0xa8>
 12c:	82 2b       	or	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
 130:	08 95       	ret
 132:	24 b3       	in	r18, 0x14	; 20
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPin_Direction+0xc2>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPin_Direction+0xbe>
 142:	82 2b       	or	r24, r18
 144:	84 bb       	out	0x14, r24	; 20
 146:	08 95       	ret
 148:	21 b3       	in	r18, 0x11	; 17
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPin_Direction+0xd8>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPin_Direction+0xd4>
 158:	82 2b       	or	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <DIO_TogglePin_Value>:
		break;
	}
}
void DIO_TogglePin_Value(uint8_t port, uint8_t pin)
{
	switch(port)
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	89 f0       	breq	.+34     	; 0x184 <DIO_TogglePin_Value+0x26>
 162:	28 f0       	brcs	.+10     	; 0x16e <DIO_TogglePin_Value+0x10>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	c9 f0       	breq	.+50     	; 0x19a <DIO_TogglePin_Value+0x3c>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	11 f1       	breq	.+68     	; 0x1b0 <DIO_TogglePin_Value+0x52>
 16c:	08 95       	ret
	{
		case DIO_PORTA:
		TGL_BIT(PORTA, pin);
 16e:	2b b3       	in	r18, 0x1b	; 27
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_TogglePin_Value+0x1c>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_TogglePin_Value+0x18>
 17e:	82 27       	eor	r24, r18
 180:	8b bb       	out	0x1b, r24	; 27
		break;
 182:	08 95       	ret
		case DIO_PORTB:
		TGL_BIT(PORTB, pin);
 184:	28 b3       	in	r18, 0x18	; 24
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_TogglePin_Value+0x32>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_TogglePin_Value+0x2e>
 194:	82 27       	eor	r24, r18
 196:	88 bb       	out	0x18, r24	; 24
		break;
 198:	08 95       	ret
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
 19a:	25 b3       	in	r18, 0x15	; 21
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_TogglePin_Value+0x48>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_TogglePin_Value+0x44>
 1aa:	82 27       	eor	r24, r18
 1ac:	85 bb       	out	0x15, r24	; 21
		break;
 1ae:	08 95       	ret
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
 1b0:	22 b3       	in	r18, 0x12	; 18
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_TogglePin_Value+0x5e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_TogglePin_Value+0x5a>
 1c0:	82 27       	eor	r24, r18
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	08 95       	ret

000001c6 <LED0_Initialization>:
	DIO_SetPin_Value(LED2_PORT, LED2_PIN, LED_ON);
}
void LED2_OFF(void)
{
	//CLR_BIT(LED2_PORT, LED2_PIN);//LED-OFF
	DIO_SetPin_Value(LED2_PORT, LED2_PIN, LED_OFF);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPin_Direction>
 1d0:	08 95       	ret

000001d2 <LED0_TGL>:
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_TogglePin_Value>
 1da:	08 95       	ret

000001dc <LED1_Initialization>:
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPin_Direction>
 1e6:	08 95       	ret

000001e8 <LED1_TGL>:
 1e8:	67 e0       	ldi	r22, 0x07	; 7
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_TogglePin_Value>
 1f0:	08 95       	ret

000001f2 <LED2_Initialization>:
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	63 e0       	ldi	r22, 0x03	; 3
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPin_Direction>
 1fc:	08 95       	ret

000001fe <LED2_TGL>:
}
void LED2_TGL(void)
{
	//TGL_BIT(LED2_PORT, LED2_PIN);//LED-Toggle
	DIO_TogglePin_Value(LED2_PORT, LED2_PIN);
 1fe:	63 e0       	ldi	r22, 0x03	; 3
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_TogglePin_Value>
 206:	08 95       	ret

00000208 <main>:
#include "LED.h"
//Main function
uint8_t RECEIVED_DATA;
int main(void)
{
    SPI_Init();
 208:	0e 94 1f 01 	call	0x23e	; 0x23e <SPI_Init>
	LED0_Initialization();
 20c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED0_Initialization>
	LED1_Initialization();
 210:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED1_Initialization>
	LED2_Initialization();
 214:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LED2_Initialization>
	while (1) 
    {
    RECEIVED_DATA=SPI_Receive();
 218:	0e 94 26 01 	call	0x24c	; 0x24c <SPI_Receive>
 21c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	switch(RECEIVED_DATA)
 220:	81 33       	cpi	r24, 0x31	; 49
 222:	39 f0       	breq	.+14     	; 0x232 <main+0x2a>
 224:	82 33       	cpi	r24, 0x32	; 50
 226:	41 f0       	breq	.+16     	; 0x238 <main+0x30>
 228:	80 33       	cpi	r24, 0x30	; 48
 22a:	b1 f7       	brne	.-20     	; 0x218 <main+0x10>
	{
		case '0':
		LED0_TGL();
 22c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LED0_TGL>
		break;
 230:	f3 cf       	rjmp	.-26     	; 0x218 <main+0x10>
		case '1':
		LED1_TGL();
 232:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LED1_TGL>
		break;
 236:	f0 cf       	rjmp	.-32     	; 0x218 <main+0x10>
		case '2':
		LED2_TGL();
 238:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LED2_TGL>
		break;
 23c:	ed cf       	rjmp	.-38     	; 0x218 <main+0x10>

0000023e <SPI_Init>:
}
void SPI_Transmit(uint8_t data)
{
	SPDR = data;
	while (GET_BIT(SPSR, SPIF) != 1);
}
 23e:	bd 98       	cbi	0x17, 5	; 23
 240:	be 9a       	sbi	0x17, 6	; 23
 242:	bf 98       	cbi	0x17, 7	; 23
 244:	bc 98       	cbi	0x17, 4	; 23
 246:	83 e4       	ldi	r24, 0x43	; 67
 248:	8d b9       	out	0x0d, r24	; 13
 24a:	08 95       	ret

0000024c <SPI_Receive>:
uint8_t SPI_Receive(void)
{
	while (GET_BIT(SPSR, SPIF) != 1);
 24c:	77 9b       	sbis	0x0e, 7	; 14
 24e:	fe cf       	rjmp	.-4      	; 0x24c <SPI_Receive>
	return SPDR;
 250:	8f b1       	in	r24, 0x0f	; 15
}
 252:	08 95       	ret

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
